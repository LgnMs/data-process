//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, TS, Default)]
#[sea_orm(table_name = "sync_log")]
#[ts(
    export,
    export_to = "ui/api/models/auto-generates/SyncLog.ts",
    rename = "SyncLog"
)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub running_log: String,
    pub status: i32,
    pub sync_config_id: i32,
    #[ts(type = "any")]
    pub update_time: DateTime,
    #[ts(type = "any")]
    pub create_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sync_config::Entity",
        from = "Column::SyncConfigId",
        to = "super::sync_config::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SyncConfig,
}

impl Related<super::sync_config::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SyncConfig.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
