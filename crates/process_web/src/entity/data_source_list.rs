//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use process_core::db::DataSource;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use serde_json::json;
use ts_rs::TS;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, TS, Deserialize)]
#[sea_orm(table_name = "data_source_list")]
#[ts(
    export,
    export_to = "ui/api/models/auto-generates/DataSourceList.ts",
    rename = "DataSourceList"
)]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: Option<String>,
    pub database_name: String,
    pub table_schema: Option<String>,
    pub database_type: String,
    pub host: String,
    pub port: String,
    pub user: String,
    pub password: String,
    #[serde(skip_deserializing)]
    pub del_flag: i32,
    #[serde(skip_deserializing)]
    pub update_time: DateTime,
    #[serde(skip_deserializing)]
    pub create_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Into<DataSource> for Model {
    fn into(self) -> DataSource {
        // let password = {
        //     // 加密过程查看crates/process_web/ui/lib/encrypt.ts
        //     let a = BASE64_STANDARD.decode(&self.password).unwrap_or_default();
        //     let b = String::from_utf8(a).unwrap_or_default();
        //
        //     match b.contains("DpSALt") {
        //         true => {
        //             let c = &b[6..];
        //             let d = BASE64_STANDARD.decode(c).unwrap_or_default();
        //             String::from_utf8(d).unwrap_or_default()
        //         }
        //         false => {
        //             self.password
        //         }
        //     }
        // };
        DataSource {
            host: self.host,
            port: self.port,
            user: self.user,
            password: self.password,
            database_name: self.database_name,
            table_schema: self.table_schema,
            database_type: serde_json::from_value(json!(self.database_type)).unwrap(),
        }
    }
}
